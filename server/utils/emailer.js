const nodemailer = require('nodemailer');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.GMAIL_USER,
    pass: process.env.GMAIL_PASS,
  },
});

const translatePrefix = (prefix) => {
  const prefixMapping = {
    'mr': '‡∏ô‡∏≤‡∏¢',
    'ms': '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß',
    'mrs': '‡∏ô‡∏≤‡∏á',
    'dr': '‡∏î‡∏£.'
  };
  return prefixMapping[prefix] || prefix;
};

const translateStatus = (status) => {
  const statusMapping = {
    'teacher': '‡∏Ñ‡∏£‡∏π',
    'school_representative': '‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
    'principal': '‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£',
    'vice_principal': '‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£'
  };
  return statusMapping[status] || status;
};

const translateSchoolSize = (size) => {
  const sizeMapping = {
    'small': '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å',
    'medium': '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á',
    'large': '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà',
    'very_large': '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏û‡∏¥‡πÄ‡∏®‡∏©'
  };
  return sizeMapping[size] || size;
};

const monthMapping = {
  'January': '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°',
  'February': '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå',
  'March': '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°',
  'April': '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô',
  'May': '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°',
  'June': '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
  'July': '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°',
  'August': '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°',
  'September': '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô',
  'October': '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°',
  'November': '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô',
  'December': '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
};

function formatBuddhistDate(dateStr) {
  const date = new Date(dateStr);
  const buddhistYear = date.getFullYear() + 543;
  const monthName = monthMapping[date.toLocaleString('en-US', { month: 'long' })];
  return `${date.getDate()} ${monthName} ${buddhistYear}`;
}

async function sendEmailNotification(reservation) {
  try {
    const translatedPrefix = translatePrefix(reservation.prefix);
    const translatedStatus = translateStatus(reservation.status);
    const translatedSchoolSize = translateSchoolSize(reservation.schoolSize);

    const hasClassSubjects = Array.isArray(reservation.classSubjects) && reservation.classSubjects.length > 0;

    const classEntries = hasClassSubjects
      ? reservation.classSubjects
      : (() => {
          const grouped = (reservation.slotSelections || []).reduce((acc, slot) => {
            const classNumber = slot.classNumber || 1;
            if (!acc[classNumber]) {
              acc[classNumber] = [];
            }
            acc[classNumber].push(slot);
            return acc;
          }, {});

          return Object.entries(grouped).map(([classNumber, slots]) => ({
            classNumber: Number(classNumber),
            slots: slots.map((slot, index) => ({
              slotIndex: slot.slotIndex ?? index,
              date: slot.date || null,
              slot: slot.slot || slot.time || null,
              subject:
                slot.subject ||
                (slot.name_th ? { code: slot.code || null, name_th: slot.name_th } : null),
              code: slot.code || null,
              name_th: slot.name_th || null,
              level: slot.level || null,
              levelLabel: slot.levelLabel || null,
              category: slot.category || null,
              categoryLabel: slot.categoryLabel || null,
              subcategory: slot.subcategory || null,
              subcategoryLabel: slot.subcategoryLabel || null,
            })),
          }));
        })();

    const classDetails = classEntries
      .map((classItem, index) => {
        const classLabel = classItem.classNumber || index + 1;
        const slots = Array.isArray(classItem?.slots) ? classItem.slots : [];
        if (!slots.length) {
          return `- ‡∏´‡πâ‡∏≠‡∏á ${classLabel}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤`;
        }

        const slotLines = slots.map((slot) => {
          const subjectName =
            (slot.subject && typeof slot.subject === 'object' && slot.subject.name_th) ||
            slot.name_th ||
            '-';
          const codeValue =
            (slot.subject && typeof slot.subject === 'object' && slot.subject.code) ||
            slot.code ||
            null;
          const dateLabel = slot.date ? formatBuddhistDate(slot.date) : '-';
          const slotLabel = slot.slot || slot.time || '-';
          const levelLabel = slot.levelLabel ? ` (‡∏£‡∏∞‡∏î‡∏±‡∏ö: ${slot.levelLabel})` : '';
          return `  ‚Ä¢ ${dateLabel} ‚Ä¢ ${slotLabel} ‚Ä¢ ${subjectName}${codeValue ? ` (${codeValue})` : ''}${levelLabel}`;
        });

        return [`- ‡∏´‡πâ‡∏≠‡∏á ${classLabel}:`, ...slotLines].join('\n');
      })
      .join('\n');

    const mailOptions = {
      from: `"Sparkling Science Center" <${process.env.GMAIL_USER}>`,
      to: [process.env.GMAIL_USER, reservation.userInfo?.email].filter(Boolean).join(','),
      bcc: ['supattira.to@skru.ac.th', 'teerayut.sr@skru.ac.th'],
      subject: `‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (New Reservation): ${reservation.reservationNumber}`,
      text: `
üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà

‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•: ${translatedPrefix} ${reservation.name} ${reservation.surname}
‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${translatedStatus}
‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: ${reservation.telephone}
‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${reservation.mail}
‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${reservation.school}
‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${translatedSchoolSize}
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏ö‡∏£‡∏°: ${reservation.numberOfStudents} ‡∏Ñ‡∏ô
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${reservation.numberOfClasses || (classEntries.length || 1)} ‡∏´‡πâ‡∏≠‡∏á
‡∏ä‡πà‡∏ß‡∏á‡∏ä‡∏±‡πâ‡∏ô: ${reservation.studentRange}
‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô: ${reservation.studentRange === '‡∏°‡∏±‡∏ò‡∏¢‡∏°' ? '‡∏°.' : '‡∏õ.'}${reservation.studentLevel}
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô: ${reservation.numberOfDays} ‡∏ß‡∏±‡∏ô

üìÜ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:
${classDetails || '-'}

‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${reservation.reservationNumber}
‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ${reservation.confirmation}

‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°: ${reservation.price} ‡∏ö‡∏≤‡∏ó
  `.trim(),
    };

    await transporter.sendMail(mailOptions);
    console.log('‚úÖ Email sent');
  } catch (error) {
    console.error('‚ùå Email failed:', error);
  }
}

module.exports = { sendEmailNotification };
